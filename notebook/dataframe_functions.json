{
	"name": "dataframe_functions",
	"properties": {
		"folder": {
			"name": "spark101"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "synapsesp",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "282b2d9c-51ab-4f67-9e5f-51adabcbbff6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a2b28c85-1948-4263-90ca-bade2bac4df4/resourceGroups/kml_rg_main-96ba6ae6719e4a30/providers/Microsoft.Synapse/workspaces/synapse20250823-02-ws/bigDataPools/synapsesp",
				"name": "synapsesp",
				"type": "Spark",
				"endpoint": "https://synapse20250823-02-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synapsesp",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.5",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 60
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# **<mark>Spark 101</mark>**"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"storage_account = 'synapse082302adls'"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"source": [
					"!pip install faker"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"source": [
					"import pandas as pd\n",
					"\n",
					"import csv\n",
					"import random\n",
					"from faker import Faker\n",
					"\n",
					"fake = Faker()\n",
					"workdepts = ['A00', 'B01', 'C02', 'D03', 'E04', 'F05']\n",
					"jobs = ['Manager', 'Analyst', 'Clerk', 'Sales', 'Engineer', 'Technician']\n",
					"\n",
					"rows = []\n",
					"for i in range(1, 1001):\n",
					"    rows.append((\n",
					"        f\"E{i:04d}\",\n",
					"        fake.first_name(),\n",
					"        random.choice(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"),\n",
					"        fake.last_name(),\n",
					"        random.choice(workdepts),\n",
					"        fake.phone_number(),\n",
					"        fake.date_between(start_date='-30y', end_date='today').strftime('%Y-%m-%d'),\n",
					"        random.choice(jobs),\n",
					"        random.randint(10, 20),\n",
					"        random.choice(['M', 'F']),\n",
					"        fake.date_of_birth(minimum_age=25, maximum_age=65).strftime('%Y-%m-%d'),\n",
					"        round(random.uniform(30000, 120000), 2),\n",
					"        round(random.uniform(1000, 10000), 2),\n",
					"        round(random.uniform(0, 5000), 2)\n",
					"    ))\n",
					"\n",
					"columns = ['EMPNO','FIRSTNAME','MIDINIT','LASTNAME','WORKDEPT','PHONENO',\n",
					"           'HIREDATE','JOB','EDLEVEL','SEX','BIRTHDATE','SALARY','BONUS','COMM']\n",
					"\n",
					"df = spark.createDataFrame(rows, columns)\n",
					"\n",
					"output_path = f\"abfss://store@{storage_account}.dfs.core.windows.net//employee/\"\n",
					"\n",
					"df.write.mode(\"overwrite\").option(\"header\", \"true\").csv(output_path)\n",
					""
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"source": [
					"spark"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df = spark.read.format(\"csv\") \\\n",
					"    .option(\"header\", \"true\") \\\n",
					"    .load(f\"abfss://store@{storage_account}.dfs.core.windows.net/employee/*.csv\")\n",
					"\n",
					"employee_df.show(5)"
				],
				"execution_count": 63
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## <mark>General Info & Metadata</mark>"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.columns"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.dtypes"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.schema"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.printSchema()"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.inputFiles()"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.isLocal()"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.isStreaming"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"source": [
					"print(employee_df.is_cached)\n",
					"\n",
					"employee_df.cache()\n",
					"\n",
					"print(employee_df.is_cached)\n",
					"\n",
					"print(employee_df.count())\n",
					"\n",
					"print(employee_df.is_cached)\n",
					"print(employee_df.storageLevel)\n",
					"\n",
					"employee_df.unpersist()\n",
					"\n",
					"print(employee_df.is_cached)"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"source": [
					"print(employee_df.storageLevel)\n",
					"employee_df.storageLevel"
				],
				"execution_count": 28
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## <mark>Actions</mark>"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.limit(5).collect()"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.count()"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.first()"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"source": [
					"print(employee_df.head())\n",
					"print(employee_df.head(5))"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.take(5)"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.tail(5)"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.show(5, False)"
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.toPandas()"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"source": [
					"for r in employee_df.limit(5).toLocalIterator(): print(r)"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.toJSON().take(5)"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.select(\"EMPNO\").toDF(\"employee_id\").show(5)"
				],
				"execution_count": 39
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## <mark>Persistence</mark>"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.cache()"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.is_cached"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.count()"
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.persist()"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.unpersist()"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.is_cached"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"source": [
					"# Enable checkpointing\n",
					"spark.sparkContext.setCheckpointDir(\"/tmp/checkpoints\")\n",
					"\n",
					"# Create a long lineage DataFrame\n",
					"df_long = employee_df.filter(employee_df.EDLEVEL > 15)\n",
					"\n",
					"# Save checkpoint\n",
					"df_ckpt = df_long.checkpoint()\n",
					"\n",
					"# Action\n",
					"df_ckpt.show()\n",
					""
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"source": [
					"df_local_ckpt = employee_df.localCheckpoint()"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"# Action\n",
					"df_local_ckpt.show()"
				],
				"execution_count": 54
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## <mark>Column Operations</mark>"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.columns"
				],
				"execution_count": 64
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import concat_ws\n",
					"\n",
					"employee_df.select(\"EMPNO\", concat_ws(\" \", \"FIRSTNAME\", \"LASTNAME\").alias(\"FULLNAME\")).show(5)"
				],
				"execution_count": 78
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import col\n",
					"\n",
					"employee_df.selectExpr(\"EMPNO\", \"FIRSTNAME || ' ' || LASTNAME as FULLNAME\").show(5)"
				],
				"execution_count": 83
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.withColumn(\"EMP_ID\", col(\"EMPNO\")).show(5)"
				],
				"execution_count": 93
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.withColumnRenamed(\"EMPNO\", \"EMP_ID\").show(5)"
				],
				"execution_count": 94
			},
			{
				"cell_type": "code",
				"source": [
					"employee_df.alias(\"Employee\")"
				],
				"execution_count": 98
			},
			{
				"cell_type": "code",
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}